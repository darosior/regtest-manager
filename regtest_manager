#!/usr/bin/env bash

if [ "$0" = "$BASH_SOURCE" ];then
	echo "You should source this script to benefit of aliases"
	exit 0
fi

n_nodes=2

start_regtest () {
	PREFIX_DIR="$PWD/regtest"
	if ! test -d "$PREFIX_DIR";then
		mkdir "$PREFIX_DIR"
	fi

	if [ "$#" == "1" ];then
		n_nodes=$1
	fi

	for i in $(seq $n_nodes);do
		bc_rpc=$((9000 + $i))
		bc_port=$((10000 + $i))
		bc_dir="$PREFIX_DIR/bcdir$i"
		ln_port=$((11000 + $i))
		ln_dir="$PREFIX_DIR/lndir$i"
		mkdir "$bc_dir"
		bitcoind -daemon -regtest -txindex -connect="127.0.0.1:$(($bc_port - 1))" -whitelist="127.0.0.1" -rpcpassword="test" -rpcuser="test" -rpcport="$bc_rpc" -datadir="$bc_dir" -bind="127.0.0.1:$bc_port" > /dev/null
		echo "Started bitcoind n.$i with P2P port $bc_port, RPC port $bc_rpc and datadir $bc_dir"
		sleep 0.2
		lightningd --daemon --network regtest --bitcoin-rpcuser test --bitcoin-rpcpassword test --bitcoin-datadir "$bc_dir" --bitcoin-rpcport $bc_rpc --bind-addr "127.0.0.1:$ln_port" --lightning-dir "$ln_dir" --alias "testnode$i" > /dev/null
		echo "Started lightningd on top of it with directory $ln_dir"
		echo ""
		alias "bcreg$i"="bitcoin-cli -regtest -rpcpassword=test -rpcuser=test -rpcport=$bc_rpc"
		alias "lnreg$i"="lightning-cli --lightning-dir $ln_dir"
	done

	echo ""
	echo "Started $n_nodes pairs of bitcoind and lightningd nodes with rpc user \"test\" and pass \"test\"."
	echo "You can access them using aliases created for each one : bcregi and lnregi with i the node number for bitcoin-cli and lightning cli."
	echo "For example you can try with \"bcreg2 getblockchaininfo\" and \"lnreg2 getinfo\" "
}

generate_regtest () {
	while true;do
		for i in $(seq $n_nodes);do
			bcli="bitcoin-cli -regtest -rpcpassword=test -rpcuser=test -rpcport=$((9000 + $i))"
			if [ $($bcli generatetoaddress 1 $($bcli getnewaddress) &> /dev/null; echo $?) -ne 0 ];then
				return
			fi
			sleep 3
		done
		sleep 5
	done
}

fund_regtest () {
	if [ $(jq --help > /dev/null; echo $?) -ne 0 ];then
		echo "I need the 'jq' package in order to fund channels."
		return
	fi

	# We cannot brutally generate blocks here or we'll fork
	echo "Getting some bitcoins on each 'bitcoind'"
	echo "Oh, they are immature :-("
	echo "Let's try to water them so they grow up"
	sleep 0.2
	echo "This didn't work.. Ok, let's try to generate more than 50 blocks to get some mature ones"
	for n in $(seq 60);do
		for i in $(seq $n_nodes);do
			bcli="bitcoin-cli -regtest -rpcpassword=test -rpcuser=test -rpcport=$((9000 + $i))"
			if [ "$n" = "1" ];then
				while [ $($bcli getblockchaininfo > /dev/null; echo $?) -ne 0 ];do
					echo "Waiting for bitcoind to warmup.."
					sleep 1
				done
			fi
			bcli="bitcoin-cli -regtest -rpcpassword=test -rpcuser=test -rpcport=$((9000 + $i))"
			$bcli generatetoaddress 1 $($bcli getnewaddress) > /dev/null
			# Hacky and probably inneficient way to prevent a race condition between net msg and block template
			sleep 0.2
		done
		echo -en "\r$n/60 blocks generated"
	done
	echo -n "\nThis worked !!"

	generate_regtest &
	echo "(We started generating blocks in background)..."

	# The first try put all in a single loop, it hard forked miserably
	echo "Transferring some to each 'lightningd'"
	for i in $(seq $n_nodes);do
		bcli="bitcoin-cli -regtest -rpcpassword=test -rpcuser=test -rpcport=$((9000 + $i))"
		lcli="lightning-cli --lightning-dir $PREFIX_DIR/lndir$i"
		$bcli sendtoaddress $($lcli newaddr | jq -r .address) 10 > /dev/null
	done
	# Wait for a block
	sleep 5

	echo "Now let's fund channels ! Channels are funded like node_n ==> node_n+1"
	for i in $(seq $(($n_nodes - 1)));do
		# i current, ii next one
		lcli_i="lightning-cli --lightning-dir $PREFIX_DIR/lndir$i"
		lcli_ii="lightning-cli --lightning-dir $PREFIX_DIR/lndir$(($i + 1))"
		echo "Funding a channel between node $i and node $(($i + 1)) :"
		id_ii=$($lcli_ii getinfo | jq -r .id)
		$lcli_i connect "$id_ii@127.0.0.1:$((11000 + $i + 1))" > /dev/null
		echo "Waiting for lightningd to be aware of its bitcoins.."
		list=$($lcli_i listfunds | jq .outputs[0])
		while [ "$list" = "null" ];do
			sleep 1
			list=$($lcli_i listfunds | jq .outputs[0])
		done
		sleep 1
		$lcli_i fundchannel $id_ii 100000 300perkw
		echo ""
	done
	# Wait for a block
	sleep 5
	echo "Ok, you should be all set!"
}

stop_regtest () {
	PREFIX_DIR="$PWD/regtest"
	if ! test -d "$PREFIX_DIR";then
		echo "No regtest/ directory here..."
		return
	fi

	echo "lightningd can take some time to stop. It will be fixed in v0.7.2"
	for i in $(seq $n_nodes);do
		lightning-cli --lightning-dir "$PREFIX_DIR/lndir$i" stop > /dev/null
		rm -rf "$PREFIX_DIR/lndir$i"
		echo "lightningd n.$i stopped"
		sleep 0.1
		bitcoin-cli -regtest -rpcpassword=test -rpcuser=test -rpcport=$((9000 + $i)) stop > /dev/null
		rm -rf "$PREFIX_DIR/bcdir$i"
		echo "bitcoind n.$i stopped"
	done
}

kill_regtest () {
	for i in $(ps -edf |grep -E 'bitcoind|lightningd' |grep regtest |cut -c 10-15);do
		kill -9 $i
	done
	rm -rf $PWD/regtest
}
